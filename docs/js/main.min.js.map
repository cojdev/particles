{"version":3,"sources":["main.js"],"names":["starfield","args","self","this","size","maxDist","colour","particles","i","particle","Math","random","canvas","width","height","render","x","y","addEventListener","network","mouse","mouseParticle","document","body","evt","mousePos","getMousePos","collision","obj","dist","temp","length","sqrt","pow","midx","ctx","strokeStyle","floor","beginPath","moveTo","lineTo","closePath","stroke","update","boundary","vx","vy","xpos","animate","clearRect","requestAnimationFrame","console","log","dia","pixelRatio","fillStyle","arc","PI","fill","resizeCanvas","window","innerWidth","innerHeight","style","cvs","rect","getBoundingClientRect","clientX","left","clientY","top","getElementById","getContext","set1a","set1b","scale","round","devicePixelRatio"],"mappings":"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","file":"main.min.js","sourcesContent":["/**\r\n * Author: Charles Ojukwu\r\n */\r\n\r\n(function () {\r\n\r\n'use strict';\r\n\r\nvar canvas,\r\n\tctx,\r\n\tpixelRatio,\r\n\tmousePos;\r\n\r\n//Onload function\r\nfunction init () {\r\n\t//Canvas setup\r\n\tcanvas = document.getElementById(\"canvas\");\r\n\tctx = canvas.getContext(\"2d\");\r\n\t//For \"Retina\" Displays\r\n\tctx.scale(2,2);\r\n\tpixelRatio = Math.round(window.devicePixelRatio) || 1;\r\n\r\n\t//Make canvas fill the screen\r\n\tresizeCanvas();\r\n\twindow.addEventListener('resize', resizeCanvas, false);\r\n\r\n\t//Particle Network\r\n\tvar set1a = new network({\r\n\t\tsize: 150,\r\n\t\tmouse: true\r\n\t});\r\n\r\n\tvar set1b = new network({\r\n\t\tsize: 150,\r\n\t\tmouse: true\r\n\t});\r\n\r\n\t//Starfield\r\n\tvar set2 = new starfield({\r\n\t\tsize: 100\r\n\t});\r\n\r\n\tfunction animate () {\r\n\t\t//Clear the canvas\r\n\t\tvar cvs = document.getElementById(\"canvas\");\r\n\t\tcvs.getContext(\"2d\").clearRect(0, 0, cvs.width, cvs.height);\r\n\t\tset1a.render();\r\n\t\tset1b.render();\r\n\t\trequestAnimationFrame(animate);\r\n\t}\r\n\tanimate();\r\n\t//set2.render();\r\n}\r\n\r\nfunction starfield (args) {\r\n\t\r\n\targs = args || {};\r\n\t\r\n\tvar self = this;\r\n\r\n\tself.size = args.size || 100;\r\n\tself.maxDist = args.maxDist || 150;\r\n\tself.colour = args.colour || \"#ffffff\";\r\n\r\n\tself.particles = [];\r\n\tfor (var i = 0; i < self.size; i++) {\r\n\t\tself.particles[i] = new particle(\r\n\t\t\tMath.random() * canvas.width,\r\n\t\t\tMath.random() * canvas.height,\r\n\t\t\tMath.random()\r\n\t\t);\r\n\t}\r\n\r\n\tself.render = function () {\r\n\t\tfor (var i = 0; i < self.size; i++) {\r\n\t\t\tself.particles[i].x = Math.random() * canvas.width;\r\n\t\t\tself.particles[i].y = Math.random() * canvas.height;\r\n\t\t\tself.particles[i].render(self.colour);\r\n\t\t}\r\n\t};\r\n\r\n\taddEventListener(\"resize\", self.render);\r\n}\r\n\r\nfunction network (args) {\r\n\r\n\targs = args || {};\r\n\r\n\tvar self = this;\r\n\r\n\tself.size = args.size || 100;\r\n\tself.maxDist = args.maxDist || 150;\r\n\tself.colour = args.colour || \"#000000\";\r\n\r\n\tself.particles = [];\r\n\tfor (var i = 0; i < self.size; i++) {\r\n\t\tself.particles[i] = new particle(\r\n\t\t\t(Math.random() * (canvas.width + self.maxDist)) - (self.maxDist / 2),\r\n\t\t\t(Math.random() * (canvas.height + self.maxDist)) - (self.maxDist / 2)\r\n\t\t);\r\n\t}\r\n\r\n\t//Check mouse position\r\n\tif (args.mouse === true) {\r\n\t\tvar mouseParticle = new particle();\r\n\t\tdocument.body.addEventListener(\"mousemove\",function(evt){\r\n\t\t\tmousePos = getMousePos(canvas,evt);\r\n\t\t\tmouseParticle.x = mousePos.x;\r\n\t\t\tmouseParticle.y = mousePos.y;\r\n\t\t});\r\n\t}\r\n\r\n\t//Draw lines between nearby particles\r\n\tself.collision = function (obj, dist) {\r\n\t\tvar temp;\r\n\t\tfor (var i = 0; i < self.particles.length; i++) {\r\n\t\t\t//Don't interact with self\r\n\t\t\tif (obj !== self.particles[i]) {\r\n\t\t\t\ttemp = Math.sqrt(Math.pow((obj.x - self.particles[i].x),2) + Math.pow((obj.y - self.particles[i].y),2));\r\n\t\t\t\tif (temp < dist) {\r\n\t\t\t\t\tvar midx = (obj.x + self.particles[i].x) / 2;\r\n\t\t\t\t\tvar midy = (obj.y + self.particles[i].y) / 2;\r\n\t\t\t\t\tctx.strokeStyle = \"rgba(\"+Math.floor(255*(midx/canvas.width))+\",50,\"+Math.floor(255*((canvas.width - midx)/canvas.width))+\",\" + Math.pow((dist-temp)/dist,3) + \")\";\r\n\t\t\t\t\t//Start drawing\r\n\t\t\t\t\tctx.beginPath();\r\n\t\t\t\t\tctx.moveTo(obj.x, obj.y);\r\n\t\t\t\t\tctx.lineTo(self.particles[i].x, self.particles[i].y);\r\n\t\t\t\t\tctx.closePath();\r\n\t\t\t\t\tctx.stroke();\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t//Update particle positions\r\n\tself.update = function (obj, boundary) {\r\n\t\t//Velocity\r\n\t\tobj.x += obj.vx;\r\n\t\tobj.y += obj.vy;\r\n\t\t//Boundary overflow\r\n\t\tif (obj.x > canvas.width+(boundary/2)) {\r\n\t\tobj.x = -(boundary/2);\r\n\t\t}\r\n\t\telse if (obj.xpos < -(boundary/2)) {\r\n\t\t\tobj.x = canvas.width+(boundary/2);\r\n\t\t}\r\n\t\tif (obj.y > canvas.height+(boundary/2)) {\r\n\t\t\tobj.y = -(boundary/2);\r\n\t\t}\r\n\t\telse if (obj.y < -(boundary/2)) {\r\n\t\t\tobj.y = canvas.height+(boundary/2);\r\n\t\t}\t\r\n\t};\r\n\t//Draw\r\n\tself.render = function () {\r\n\t\tif (args.mouse === true) {\r\n\t\t\tself.collision(mouseParticle, self.maxDist*2);\r\n\t\t\tmouseParticle.render();\r\n\t\t}\r\n\t\t//Particle interaction\r\n\t\tfor (var i = 0; i < self.particles.length; i++) {\r\n\t\t\tself.collision(self.particles[i], self.maxDist);\r\n\t\t\tself.update(self.particles[i], self.maxDist);\r\n\t\t\tself.particles[i].render();\r\n\t\t}\r\n\t}\r\n\r\n\tself.animate = function () {\r\n\t\t//Clear the canvas\r\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\t\tself.render();\r\n\t\trequestAnimationFrame(self.animate);\r\n\t}\r\n\t//Logging\r\n\tconsole.log(\r\n\t\tself.particles.length + \" particles generated\\n\"+\r\n\t\t\"Maximum gap: \" + self.maxDist\r\n\t);\r\n\t\r\n}\r\n\r\n//Particle constructor\r\nfunction particle (x,y,dia) {\r\n\tvar self = this;\r\n\tself.x = x || 1;\r\n\tself.y = y || 1;\r\n\tself.vx = (Math.random()*1)-.5;\r\n\tself.vy = (Math.random()*1)-.5;\r\n\tself.dia = dia * pixelRatio || 2 * pixelRatio;\r\n\r\n\tself.render = function (colour) {\r\n\t\tctx.beginPath();\r\n\t\tctx.fillStyle = colour;\r\n\t\tif(self.dia){\r\n\t\t\tctx.arc(self.x,self.y,self.dia,0,2*Math.PI);\r\n\t\t}else{\r\n\t\t\tctx.arc(self.x,self.y,2,0,2*Math.PI);\r\n\t\t}\r\n\t\tctx.closePath();\r\n\t\tctx.fill();\r\n\t}\r\n}\r\n\r\n//Make the canvas fill the screen\r\nfunction resizeCanvas() {\r\n\tcanvas.width = window.innerWidth * pixelRatio;\r\n\tcanvas.height = window.innerHeight * pixelRatio;\r\n\t//Necessary on devices with pixelRatio above 1\r\n\tcanvas.style.width = window.innerWidth + \"px\";\r\n\tcanvas.style.height = window.innerHeight + \"px\";\r\n}\r\n//Get Mouse Position\r\nfunction getMousePos(cvs, evt) {\r\n\tvar rect = cvs.getBoundingClientRect();\r\n\treturn {\r\n\t\tx: evt.clientX - rect.left,\r\n\t\ty: evt.clientY - rect.top\r\n\t};\r\n}\r\n\r\n//Execute when DOM has loaded\r\ndocument.addEventListener('DOMContentLoaded',init,false);\r\n\r\n})();"]}