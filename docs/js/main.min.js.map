{"version":3,"sources":["main.js"],"names":["network","args","self","this","size","maxDist","colour","particles","i","particle","Math","random","canvas","width","height","mouse","mouseParticle","document","body","addEventListener","evt","mousePos","getMousePos","x","y","collision","obj","dist","temp","length","sqrt","pow","midx","ctx","strokeStyle","floor","beginPath","moveTo","lineTo","closePath","stroke","update","vx","vy","xpos","render","animate","clearRect","requestAnimationFrame","console","log","dia","pixelRatio","fillStyle","arc","PI","fill","resizeCanvas","window","innerWidth","innerHeight","style","cvs","rect","getBoundingClientRect","clientX","left","clientY","top","canvas_id","getElementById","getContext","test","scale","round","devicePixelRatio"],"mappings":"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","file":"main.min.js","sourcesContent":["/**\r\n * Author: Charles Ojukwu\r\n */\r\n\r\n(function () {\r\n\r\n'use strict';\r\n\r\nvar canvas,\r\n\tctx,\r\n\tpixelRatio,\r\n\tmousePos;\r\n\r\n//Onload function\r\nfunction init () {\r\n\t//Canvas setup\r\n\tcanvas = document.getElementById(\"canvas\");\r\n\tctx = canvas.getContext(\"2d\");\r\n\t//For \"Retina\" Displays\r\n\tctx.scale(2,2);\r\n\tpixelRatio = Math.round(window.devicePixelRatio) || 1;\r\n\r\n\t//Make canvas fill the screen\r\n\tresizeCanvas();\r\n\twindow.addEventListener('resize', resizeCanvas, false);\r\n\r\n\t//Particle Network\r\n\tvar test = new network({\r\n\t\tsize: 150,\r\n\t\tmaxDist: 200,\r\n\t\tmouse: true,\r\n\t\tcolour: \"#ff0000\"\r\n\t});\r\n\r\n\tfunction animate (canvas_id) {\r\n\t\t//Clear the canvas\r\n\t\tvar cvs = document.getElementById(canvas_id);\r\n\t\tcvs.getContext(\"2d\").clearRect(0, 0, cvs.width, cvs.height);\r\n\t\ttest.render();\r\n\t\trequestAnimationFrame(function () {\r\n\t\t\tanimate(canvas_id);\r\n\t\t});\r\n\t}\r\n\r\n\tanimate(\"canvas\");\r\n}\r\n\r\nfunction scene () {\r\n\r\n}\r\n\r\nfunction network (args) {\r\n\r\n\targs = args || {};\r\n\r\n\tvar self = this;\r\n\r\n\tself.size = args.size || 75;\r\n\tself.maxDist = args.maxDist || 200;\r\n\tself.colour = args.colour || \"#000000\";\r\n\r\n\tself.particles = [];\r\n\tfor (var i = 0; i < self.size; i++) {\r\n\t\tself.particles[i] = new particle(\r\n\t\t\t(Math.random() * (canvas.width + self.maxDist)) - (self.maxDist / 2),\r\n\t\t\t(Math.random() * (canvas.height + self.maxDist)) - (self.maxDist / 2)\r\n\t\t);\r\n\t}\r\n\r\n\t//Check mouse position\r\n\tif (args.mouse === true) {\r\n\t\tvar mouseParticle = new particle();\r\n\t\tdocument.body.addEventListener(\"mousemove\",function(evt){\r\n\t\t\tmousePos = getMousePos(canvas,evt);\r\n\t\t\tmouseParticle.x = mousePos.x;\r\n\t\t\tmouseParticle.y = mousePos.y;\r\n\t\t});\r\n\t}\r\n\r\n\t//Draw lines between nearby particles\r\n\tself.collision = function (obj, dist) {\r\n\t\tvar temp;\r\n\t\tfor (var i = 0; i < self.particles.length; i++) {\r\n\t\t\t//Don't interact with self\r\n\t\t\tif (obj !== self.particles[i]) {\r\n\t\t\t\ttemp = Math.sqrt(Math.pow((obj.x - self.particles[i].x),2) + Math.pow((obj.y - self.particles[i].y),2));\r\n\t\t\t\tif (temp < dist) {\r\n\t\t\t\t\tvar midx = (obj.x + self.particles[i].x) / 2;\r\n\t\t\t\t\tvar midy = (obj.y + self.particles[i].y) / 2;\r\n\t\t\t\t\tctx.strokeStyle = \"rgba(\"+Math.floor(255*(midx/canvas.width))+\",50,\"+Math.floor(255*((canvas.width - midx)/canvas.width))+\",\" + Math.pow((dist-temp)/dist,5) + \")\";\r\n\t\t\t\t\t//Start drawing\r\n\t\t\t\t\tctx.beginPath();\r\n\t\t\t\t\tctx.moveTo(obj.x, obj.y);\r\n\t\t\t\t\tctx.lineTo(self.particles[i].x, self.particles[i].y);\r\n\t\t\t\t\tctx.closePath();\r\n\t\t\t\t\tctx.stroke();\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t//Update particle positions\r\n\tself.update = function (obj) {\r\n\t\t//Velocity\r\n\t\tobj.x += obj.vx;\r\n\t\tobj.y += obj.vy;\r\n\t\t//Boundary overflow\r\n\t\tif (obj.x > canvas.width+(self.maxDist/2)) {\r\n\t\tobj.x = -(self.maxDist/2);\r\n\t\t}\r\n\t\telse if (obj.xpos < -(self.maxDist/2)) {\r\n\t\t\tobj.x = canvas.width+(self.maxDist/2);\r\n\t\t}\r\n\t\tif (obj.y > canvas.height+(self.maxDist/2)) {\r\n\t\t\tobj.y = -(self.maxDist/2);\r\n\t\t}\r\n\t\telse if (obj.y < -(self.maxDist/2)) {\r\n\t\t\tobj.y = canvas.height+(self.maxDist/2);\r\n\t\t}\t\r\n\t};\r\n\t//\r\n\tself.render = function () {\r\n\t\tif (args.mouse === true) {\r\n\t\t\tself.collision(mouseParticle, self.maxDist*2);\r\n\t\t\tmouseParticle.render();\r\n\t\t}\r\n\t\t//Particle interaction\r\n\t\tfor (var i = 0; i < self.particles.length; i++) {\r\n\t\t\tself.collision(self.particles[i], self.maxDist);\r\n\t\t\tself.update(self.particles[i]);\r\n\t\t\tself.particles[i].render();\r\n\t\t}\r\n\t}\r\n\r\n\tself.animate = function () {\r\n\t\t//Clear the canvas\r\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\t\tself.render();\r\n\t\trequestAnimationFrame(self.animate);\r\n\t}\r\n\t//Logging\r\n\tconsole.log(\r\n\t\tself.particles.length + \" particles generated\\n\"+\r\n\t\t\"Maximum gap: \" + self.maxDist\r\n\t);\r\n\t\r\n}\r\n\r\n//Particle constructor\r\nfunction particle (x,y) {\r\n\tvar self = this;\r\n\tself.x = x || 1;\r\n\tself.y = y || 1;\r\n\tself.vx = (Math.random()*1)-.5;\r\n\tself.vy = (Math.random()*1)-.5;\r\n\tself.dia = 2 * pixelRatio;\r\n\r\n\tself.render = function () {\r\n\t\tctx.beginPath();\r\n\t\tctx.fillStyle = \"rgb(\"+Math.floor(255*(self.x/canvas.width))+\",50,\"+Math.floor(255*((canvas.width - self.x)/canvas.width))+\")\";\r\n\t\tif(self.dia){\r\n\t\t\tctx.arc(self.x,self.y,self.dia,0,2*Math.PI);\r\n\t\t}else{\r\n\t\t\tctx.arc(self.x,self.y,2,0,2*Math.PI);\r\n\t\t}\r\n\t\tctx.closePath();\r\n\t\tctx.fill();\r\n\t}\r\n}\r\n\r\n//Make the canvas fill the screen\r\nfunction resizeCanvas() {\r\n\tcanvas.width = window.innerWidth * pixelRatio;\r\n\tcanvas.height = window.innerHeight * pixelRatio;\r\n\t//Necessary on devices with pixelRatio above 1\r\n\tcanvas.style.width = window.innerWidth + \"px\";\r\n\tcanvas.style.height = window.innerHeight + \"px\";\r\n}\r\n//Get Mouse Position\r\nfunction getMousePos(cvs, evt) {\r\n\tvar rect = cvs.getBoundingClientRect();\r\n\treturn {\r\n\t\tx: evt.clientX - rect.left,\r\n\t\ty: evt.clientY - rect.top\r\n\t};\r\n}\r\n\r\n//Execute when DOM has loaded\r\ndocument.addEventListener('DOMContentLoaded',init,false);\r\n\r\n})();"]}